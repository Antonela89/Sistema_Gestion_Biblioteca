// Importamos la funci√≥n que vamos a probar
const { generarReporteLibros } = require('../05-reportes.js'); 

// Importamos el array biblioteca para poder controlarlo en nuestros tests
const { biblioteca } = require("./02-gestion_libro.js");

// --- Mock de Datos para el Test ---
// Creamos un estado de biblioteca predecible y variado para probar todos los c√°lculos.
const mockBiblioteca = [
    { id: 1, titulo: 'Don Quijote', anio: 1605, genero: 'Novela', disponible: true },
    { id: 2, titulo: 'Project Hail Mary', anio: 2021, genero: 'Ciencia Ficci√≥n', disponible: false },
    { id: 3, titulo: 'Duna', anio: 1965, genero: 'Ciencia Ficci√≥n', disponible: true },
    { id: 4, titulo: 'El Aleph', anio: 1949, genero: 'Cuentos', disponible: false },
    { id: 5, titulo: 'Libro Misterioso', anio: 2000, disponible: true }, // Libro sin g√©nero definido
];

// ==========================================================================================
// === Configuraci√≥n del Entorno de Test                                                  ===
// ==========================================================================================

beforeEach(() => {
    // Antes de cada test, reseteamos la biblioteca a nuestro estado mock controlado.
    biblioteca.length = 0;
    biblioteca.push(...JSON.parse(JSON.stringify(mockBiblioteca)));

    // Espiamos console.log y console.table para que no impriman y podamos verificar sus llamadas.
    jest.spyOn(console, 'log').mockImplementation(() => {});
    jest.spyOn(console, 'table').mockImplementation(() => {});
});

afterAll(() => {
    // Restauramos los mocks al final de todos los tests.
    jest.restoreAllMocks();
});


// ==========================================================================================
// === Tests para generarReporteLibros                                                  ===
// ==========================================================================================

describe('generarReporteLibros', () => {

    test('debe calcular y mostrar correctamente todas las estad√≠sticas del reporte', () => {
        // --- Act ---
        // Ejecutamos la funci√≥n que queremos probar.
        generarReporteLibros();

        // --- Assert ---
        // Verificamos que los c√°lculos de las estad√≠sticas (mostrados con console.log) son correctos.
        // Usamos expect.stringContaining para no depender del formato exacto (emojis, etc.).
        
        // 1. Verificar total de libros
        expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Cantidad Total de libros: 5'));

        // 2. Verificar libros prestados
        expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Cantidad de libros Prestados: 2'));

        // 3. Verificar libro m√°s antiguo
        expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Libro m√°s Antiguo: Don Quijote , üìÖ A√±o: 1605'));
        
        // 4. Verificar libro m√°s nuevo
        expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Libro m√°s Nuevo: Project Hail Mary, üìÖ A√±o: 2021'));
        
        // 5. Verificar la tabla de g√©neros (la parte m√°s compleja)
        // Replicamos la l√≥gica de la funci√≥n para saber qu√© datos exactos deber√≠a recibir console.table.
        const expectedTableData = [
            { "G√©nero": "Ciencia Ficci√≥n", "Cantidad de Libros": 2 },
            { "G√©nero": "Novela", "Cantidad de Libros": 1 },
            { "G√©nero": "Cuentos", "Cantidad de Libros": 1 },
            { "G√©nero": "Sin G√©nero", "Cantidad de Libros": 1 },
        ];
        
        // Verificamos que console.table fue llamado con la estructura y datos correctos, ya ordenados.
        expect(console.table).toHaveBeenCalledWith(expectedTableData);
    });

    test('debe manejar una biblioteca vac√≠a sin lanzar errores', () => {
        // --- Arrange ---
        // Forzamos un estado de biblioteca vac√≠a para probar el caso l√≠mite.
        biblioteca.length = 0;

        // --- Act ---
        // Usamos una funci√≥n an√≥nima para que Jest pueda capturar el error si ocurre.
        const action = () => generarReporteLibros();

        // --- Assert ---
        // La implementaci√≥n actual de la funci√≥n con .reduce() en un array vac√≠o SIN valor inicial lanzar√≠a un TypeError.
        // Un buen test debe detectar esto. Lo ideal ser√≠a que la funci√≥n no se rompiera.
        // Este test verifica que la funci√≥n NO lanza un error (asumiendo que se ha hecho robusta).
        // Si la funci√≥n S√ç se rompe, este test fallar√°, indic√°ndonos que debemos mejorarla.
        
        // Para que este test pase, la funci√≥n original debe ser refactorizada para manejar el caso vac√≠o.
        // Por ejemplo, a√±adiendo al principio:
        // if (biblioteca.length === 0) { console.log("No hay libros para generar un reporte."); return; }
        
        expect(action).not.toThrow();
        
        // Y podemos verificar que se muestra un mensaje informativo.
        // Esto depende de c√≥mo se refactorice la funci√≥n.
        // Por ahora, solo comprobamos que no se rompa.
    });

});